object Problem008 {
  /*
Project Euler - Problem 8

Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
    */

  val data = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
""".replace("\n", "").replace("\r", "").trim      //> data  : String = 7316717653133062491922511967442657474235534919493496983520
                                                  //| 312774506326239578318016984801869478851843858615607891129494954595017379583
                                                  //| 319528532088055111254069874715852386305071569329096329522744304355766896648
                                                  //| 950445244523161731856403098711121722383113622298934233803081353362766142828
                                                  //| 064444866452387493035890729629049156044077239071381051585930796086670172427
                                                  //| 121883998797908792274921901699720888093776657273330010533678812202354218097
                                                  //| 512545405947522435258490771167055601360483958644670632441572215539753697817
                                                  //| 977846174064955149290862569321978468622482839722413756570560574902614079729
                                                  //| 686524145351004748216637048440319989000889524345065854122758866688116427171
                                                  //| 479924442928230863465674813919123162824586178664583591245665294765456828489
                                                  //| 128831426076900422421902267105562632111110937054421750694165896040807198403
                                                  //| 850962455444362981230987879927244284909188845801561660979191338754992005240
                                                  //| 63689912560717606058861
                                                  //| Output exceeds cutoff limit.

  def findProducts(s: String): List[Long] = {
    def loop(i: Int, xs: List[Long]): List[Long] = {
      if (i > s.size - 5) xs
      else loop(i + 1, data.substring(i, i + 5).toCharArray().map(x => x.toString.toLong).reduceLeft(_ * _) :: xs)
    }
    loop(0, List())
  }                                               //> findProducts: (s: String)List[Long]

	// FINAL SOLUTION
  findProducts(data).sortWith(_ < _).last         //> res0: Long = 40824

}